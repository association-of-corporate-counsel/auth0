<?php

use Drupal\Core\Form\FormStateInterface;

/**
 * @file
 * Module definition
 */
define('AUTH0_DEFAULT_SCOPES', 'openid email profile');
define('AUTH0_DEFAULT_SIGNING_ALGORITHM', 'RS256');
define('AUTH0_DEFAULT_USERNAME_CLAIM', 'nickname');
define('AUTH0_MODULE_VERSION', '2.5');

/**
 * Replace a form with the lock widget.
 */
function auth0_theme() {
  return [
    'auth0_login' => [
      'template'  => 'auth0-login',
      'variables' => [
        'loginCSS' => NULL,
      ],
    ],
  ];
}

/**
 * Handle users deletion, it should delete the Auth0 profile.
 */
function auth0_user_delete($account) {
  \Drupal::database()->delete('auth0_user')
      ->condition('drupal_id', $account->uid->value)
      ->execute();
}

/**
 * Use Refresh Token.
 */
function auth0_signin_with_refresh_token($token) {
  $helper = \Drupal::service('auth0.helper');

  return $helper->getUserUsingRefreshToken($token);
}

/**
 * Implements hook_library_info_build().
 */
function auth0_library_info_build() {
  $config = \Drupal::service('config.factory')->get('auth0.settings');
  return [
    'auth0.widget' => [
      'js' => [
        $config->get('auth0_widget_cdn') => [
          'type' => 'external',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function auth0_preprocess_html(&$variables) {

  $config = \Drupal::service('config.factory')->get('auth0.settings');

  $js_enable = $config->get('auth0_js_enable');

  $auth0_client_id_js = $config->get('auth0_client_id_js');
  $auth0_domain_js = $config->get('auth0_domain_js');

  if ($js_enable && $auth0_client_id_js && empty($_SESSION['legacy_login'])) {
    $variables['#attached']['drupalSettings']['auth0_client_id'] = $auth0_client_id_js;
    $variables['#attached']['drupalSettings']['auth0_domain'] = $auth0_domain_js;

    $variables['#attached']['library'][] = 'auth0/auth0.js_auth';
    
    $current_user = \Drupal::currentUser();

    $roles = $current_user->getRoles();

    foreach ($roles as $role) {
      $variables['attributes']['class'][] = 'role--' . $role;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function auth0_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id == 'user_login_form') {
    array_unshift($form['#validate'], 'auth0_validate_user_form_legacy');
  }
}

function auth0_validate_user_form_legacy(array &$form,
    FormStateInterface $form_state) {

  $values = $form_state->getValues();

  $users = \Drupal::entityTypeManager()
      ->getStorage('user')
      ->loadByProperties([
    'name' => $values['name'],
  ]);

  $roles = [];

  if ($users) {
    $user = reset($users);

    $roles = $user->getRoles();
  }

  if (!$users || !in_array('administrator', $roles)) {

    $form_state->setErrorByName('name',
        t('You can login only with an administrator account'));
  }
  else {
    $_SESSION['legacy_login'] = 1;
  }
}
